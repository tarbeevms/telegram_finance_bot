"""–°–µ—Ä–≤–µ—Ä Telegram –±–æ—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ"""
# –ü–æ–¥–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
import logging
import os
from dotenv import load_dotenv
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

import db
import exceptions
import expenses
from categories import Categories


# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
load_dotenv()

logging.basicConfig(level=logging.INFO)
# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(commands=['start', 'help', 'alesya'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    if not (expenses.check_budget_exists(message.from_user.id)):
        db.insert("budget", {"user_id": message.from_user.id, "daily_limit": 700})
    await message.answer(
        "–ë–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤\n\n"
        "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥: 250 —Ç–∞–∫—Å–∏\n"
        "–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /today\n"
        "–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: /month\n"
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: /expenses\n"
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç: /categories\n\n"
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: /limit *—á–∏—Å–ª–æ*\n"
        f"–¢–µ–∫—É—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {expenses._get_budget_limit(message.from_user.id)} —Ä—É–±.")


@dp.message_handler(commands=['limit'])
async def set_budget_limit(message: types.Message):
    command = message.get_args()
    if command is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /limit —á–∏—Å–ª–æ"
        )
    else:
        try:
            dlimit = int(command)
            expenses._set_budget_limit(dlimit, message.from_user.id)
            await message.answer(
                "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
                f"–¢–µ–∫—É—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {expenses._get_budget_limit(message.from_user.id)} —Ä—É–±.")
        except ValueError:
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /limit —á–∏—Å–ª–æ\n"
                f"–¢–µ–∫—É—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {expenses._get_budget_limit(message.from_user.id)}"
            )


# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é —Ç—Ä–∞—Ç—ã
@dp.message_handler(lambda message: message.text.startswith('/del'))
async def del_expense(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
    row_id = int(message.text[4:])
    expenses.delete_expense(row_id)
    answer_message = "–£–¥–∞–ª–∏–ª"
    await message.answer(answer_message)


# –í—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.message_handler(commands=['categories'])
async def categories_list(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    categories = Categories().get_all_categories()
    answer_message = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:\n–ë–∞–∑–æ–≤—ã–µ:"

    for c in categories:
        if c.is_base_expense:
            answer_message += "\nüü¢ " + c.name + ' (' + ", ".join(c.aliases) + ')'
    answer_message += "\n–í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ:"
    for c in categories:
        if not (c.is_base_expense):
            answer_message += "\nüî¥ " + c.name + ' (' + ", ".join(c.aliases) + ')'
    # answer_message = ("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:\n\n* " +
    # ("\n* ".join([c.name+' ('+", ".join(c.aliases)+')' for c in categories])))
    await message.answer(answer_message)


# –í—ã–≤–æ–¥ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message_handler(commands=['today'])
async def today_statistics(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç"""
    answer_message = expenses.get_today_statistics(message.from_user.id)
    await message.answer(answer_message)


# –í—ã–≤–æ–¥ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message_handler(commands=['month'])
async def month_statistics(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    answer_message = expenses.get_month_statistics(message.from_user.id)
    await message.answer(answer_message)


# –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
@dp.message_handler(commands=['expenses'])
async def list_expenses(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
    last_expenses = expenses.last(message.from_user.id)
    if not last_expenses:
        await message.answer("–†–∞—Å—Ö–æ–¥—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã")
        return
    '''
    last_expenses_rows = [
        f"{expense.amount} —Ä—É–±. –Ω–∞ {expense.category_name} ‚Äî –Ω–∞–∂–º–∏ "
        f"/del{expense.id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        for expense in last_expenses]
    '''
    last_expenses_rows = []
    cat = []
    for i in Categories().get_all_categories():
        if i.is_base_expense == True:
            cat.append(i.name)
    for expense in last_expenses:
        if expense.category_name in cat:
            last_expenses_rows.append(
                f"üü¢ {expense.amount} —Ä—É–±. –Ω–∞ {expense.category_name} ‚Äî –Ω–∞–∂–º–∏ /del{expense.id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            last_expenses_rows.append(
                f"üî¥ {expense.amount} —Ä—É–±. –Ω–∞ {expense.category_name} ‚Äî –Ω–∞–∂–º–∏ /del{expense.id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    answer_message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç—Ä–∞—Ç—ã:\n\n " + "\n\n " \
        .join(last_expenses_rows)
    await message.answer(answer_message)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
@dp.message_handler()
async def add_expense(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥"""
    try:
        expense = expenses.add_expense(message)
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))
        return
    answer_message = (
        f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞—Ç—ã {expense.amount} —Ä—É–± –Ω–∞ {expense.category_name}.\n\n"
        f"{expenses.get_today_statistics(message.from_user.id)}")
    await message.answer(answer_message)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
